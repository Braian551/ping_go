name: Flutter Android CI -> Firebase App Distribution

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-distribute:
    runs-on: ubuntu-latest
    env:
      FLUTTER_VERSION: '3.35.3'
      GRADLE_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+UseSerialGC -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -Dfile.encoding=UTF-8 -XX:+DisableExplicitGC -XX:MaxGCPauseMillis=50"

    steps:
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo docker system prune -af
          df -h

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Create env_config.dart
        run: |
          cat > lib/src/core/config/env_config.dart <<'EOF'
          class EnvConfig {
            static const String mapboxPublicToken = 'pk.placeholder';
            static const String mapboxSecretToken = 'sk.placeholder';
            static const String nominatimUserAgent = 'PingGo CI/CD';
            static const String nominatimEmail = 'ci@pinggo.app';
            static const String tomtomApiKey = 'placeholder';
            static const int mapboxMonthlyRequestLimit = 100000;
            static const int mapboxMonthlyRoutingLimit = 100000;
            static const int tomtomDailyRequestLimit = 2500;
            static const double warningThreshold = 0.5;
            static const double dangerThreshold = 0.75;
            static const double criticalThreshold = 0.9;
            static const bool enableQuotaMonitoring = true;
            static const bool showQuotaAlerts = true;
            static const bool enableMapboxStatistics = true;
          }
          EOF

      - name: Install deps
        run: flutter pub get

      - name: Run analyzer
        run: flutter analyze --no-fatal-infos --no-fatal-warnings

      - name: Run tests
        run: flutter test || true
        continue-on-error: true

      - name: Restore google-services.json
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > android/app/google-services.json

      - name: Restore keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/release-keystore.jks

      - name: Create gradle.properties for signing
        run: |
          cat > android/gradle.properties <<EOF
          MY_KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}
          MY_KEY_ALIAS=${{ secrets.KEY_ALIAS }}
          MY_KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.daemon=false
          org.gradle.parallel=false
          org.gradle.configureondemand=true
          org.gradle.caching=false
          org.gradle.workers.max=1
          EOF

      - name: Clean Gradle cache and free memory
        run: |
          # Clean Gradle cache
          ./gradlew clean --no-daemon || true
          rm -rf ~/.gradle/caches
          rm -rf android/.gradle
          # Free more memory
          sudo sysctl -w vm.drop_caches=3
          echo "Memory status after cleanup:"
          free -h
          echo "Disk space:"
          df -h

      - name: Check system resources before build
        run: |
          echo "=== System Resources ==="
          free -h
          echo "=== CPU Info ==="
          nproc
          echo "=== Memory Info ==="
          cat /proc/meminfo | head -10
          echo "=== Disk Usage ==="
          df -h /

      - name: Kill any existing Gradle processes
        run: |
          pkill -f gradle || true
          pkill -f java.*gradle || true
          sleep 5

      - name: Build release AAB (low memory build)
        timeout-minutes: 30
        run: flutter build appbundle --release

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Upload AAB to Firebase App Distribution
        run: |
          firebase appdistribution:distribute build/app/outputs/bundle/release/app-release.aab \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --groups testers \
            --release-notes "Automated build from GitHub Actions (AAB)" \
            --token "${{ secrets.FIREBASE_TOKEN }}"
